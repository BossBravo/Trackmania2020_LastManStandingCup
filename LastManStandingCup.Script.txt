#Extends "Libs/Nadeo/TMNext/TrackMania/Modes/TMNextRoundsBase.Script.txt"

#Const	CompatibleMapTypes	"TrackMania\\TM_Race,TM_Race"
#Const	Version							"2023-03-19"
#Const	Author							"[K3]boss-bravo"
#Const	ScriptName					"Modes/TrackMania/LastManStandingCup.Script.txt"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Libraries
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "Libs/Nadeo/CommonLibs/Common/Semver.Script.txt" as Semver
#Include "Libs/Nadeo/TMNext/TrackMania/Menu/Constants.Script.txt" as Menu_Const
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/CupCommon/Constants.Script.txt" as CupCommon_Const
#Include "Libs/Nadeo/TMNext/TrackMania/Modes/Cup/StateManager.Script.txt" as StateMgr
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/ScoresTable_Server.Script.txt" as UIModules_ScoresTable
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/Checkpoint_Server.Script.txt" as UIModules_Checkpoint
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/PauseMenuOnline_Server.Script.txt" as UIModules_PauseMenu_Online
#Include "ManiaApps/Nadeo/TMxSM/Race/UIModules/BigMessage_Server.Script.txt" as UIModules_BigMessage

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Settings
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Setting S_PointsStartup 50 as _("Points at start")
#Setting S_FinishTimeout -1 as _("Finish timeout")
#Setting S_RoundsPerMap 5 as _("Number of rounds per map") ///< Number of round to play on one map before going to the next one
#Setting S_NbOfWinners 1 as _("Number of winners")
#Setting S_WarmUpNb 0	as _("Number of warm up")
#Setting S_WarmUpDuration 20 as _("Duration of one warm up")
#Setting S_WarmUpTimeout -1 as _("Warm up timeout")
#Setting S_DisableFinalist False as _("When a player reach 0 points he is automatically eliminated")
#Setting S_AllowFastForwardRounds True as _("If whatever the issue of the round, all players will be finalist, the round will be skipped to the next without playing it (all players will be in finalist).")
#Setting S_PointsRepartition "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20"
#Setting S_IncreasePointsLooseEachEliminated False as _("Each time a player is eliminated, the points loss is increased. For example, if 3 players are eliminated, the first 3 points in S_PointsRepartition are not available anymore and the first will take the 4th place inside S_PointsRepartition.")
#Setting S_DNF_LossPoints 20 as _("Number of points for player that give up a round")
#Setting S_Finalist_DNF_Mode 0 as _("0 = Every finalist who DNF will be eliminated | 1 = Only finalists who passed the less checkpoints and DNF will be eliminated, others will stay alive.")
// #Setting S_ScriptEnvironment "development"
#Setting S_ScriptEnvironment "production"

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Constants
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
#Const C_ModeName "LastManStandingCup"
#Const Description _("$zThe cup mode consists of $<$t$6F9a series of races on multiple maps$>.\n\nWhen you finish a race in a bad $<$t$6F9position$>, you loose $<$t$6F9points$> substracted from your total.\nServers might propose warmup races to get familiar with a map first.\n\nTo win, you must be the last player with points. Once you are a finalist, if you finish a race last you will be eliminated.The cup mode ends once there is one player left.")

#Const C_HudModulePath "" //< Path to the hud module
#Const C_ManiaAppUrl "file://Media/ManiaApps/Nadeo/TMNext/TrackMania/Cup/Cup.Script.txt" //< Url of the mania app
#Const C_FakeUsersNb 0

#Const C_UploadRecord True
#Const C_DisplayRecordGhost False
#Const C_DisplayRecordMedal False
#Const C_CelebrateRecordGhost True
#Const C_CelebrateRecordMedal True

#Const C_ScoreTable_Height 55.

#Const C_Color_Finalist "FF0000"
#Const C_Color_Eliminated "FF0000"
#Const C_Color_Spectator "48DA36"

#Const C_Finalist_Text _("|Status|Finalist")
#Const C_Eliminated_Text _("|Status|Eliminated")
#Const C_Spectator_Text _("|Status|Spectator")

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Globales
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
declare Integer G_NbOfValidRounds;
declare Integer G_NbOfPlayersTotal;
declare Integer G_NbOfPlayersEliminated;
declare Text[] G_PlayersEliminated;
declare Text[] G_PlayersParticipants;
declare Boolean G_InitDone;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Extends
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

***Match_LogVersions***
***
Log::RegisterScript(ScriptName, Version);
Log::RegisterScript(Semver::ScriptName, Semver::Version);
Log::RegisterScript(StateMgr::ScriptName, StateMgr::Version);
***

***Match_LoadLibraries***
***
StateMgr::Load();
***

***Match_UnloadLibraries***
***
StateMgr::Unload();
***

***Match_Settings***
***
MB_Settings_UseDefaultHud = (C_HudModulePath == "");
***

***Match_Rules***
***
ModeInfo::SetName(C_ModeName);
ModeInfo::SetType(ModeInfo::C_Type_FreeForAll);
ModeInfo::SetRules(Description);
ModeInfo::SetStatusMessage("");
***

***Match_LoadHud***
***
if (C_HudModulePath != "") Hud_Load(C_HudModulePath);
***

***Match_AfterLoadHud***
***
ClientManiaAppUrl = C_ManiaAppUrl;
Race::SortScores(Race::C_Sort_TotalPoints);
UIModules_ScoresTable::SetScoreMode(UIModules_ScoresTable::C_Mode_Points);
UIModules_Checkpoint::SetVisibilityTimeDiff(False);
UIModules_Checkpoint::SetRankMode(UIModules_Checkpoint::C_RankMode_CurrentRace);
UIModules_PauseMenu_Online::SetHelp(Description);
// Hide SM Overlay
UIManager.UIAll.OverlayHideSpectatorControllers = True;
UIManager.UIAll.OverlayHideSpectatorInfos = True;
UIManager.UIAll.OverlayHideChrono = True; 
UIManager.UIAll.OverlayHideCountdown = True;
***

***Match_Yield***
***
foreach (Event in PendingEvents) {
	switch (Event.Type) {
		// Initialize players when they join the server
		case CSmModeEvent::EType::OnPlayerAdded: {
			StateMgr::InitializePlayer(Event.Player);
			CarRank::InitializePlayer(Event.Player);
		}
	}
}

StateMgr::Yield();
***

***Match_InitServer***
***
declare Integer Server_PointsLimit;
***

***Match_StartServer***
***
// Initialize mode
Clans::SetClansNb(0);
Scores::SaveInScore(Scores::C_Points_Match);
Scores::EnablePlayerNegativePoints(True, True, True);
StateMgr::ForcePlayersStates([CupCommon_Const::C_State_Waiting]);
WarmUp::SetAvailability(True);
Race::SetupRecord(
	Menu_Const::C_ScopeType_Season,
	Menu_Const::C_ScopeType_PersonalBest,
	Menu_Const::C_GameMode_TimeAttack,
	"",
	C_UploadRecord,
	C_DisplayRecordGhost,
	C_DisplayRecordMedal,
	C_CelebrateRecordGhost,
	C_CelebrateRecordMedal
);
Race::UseAutomaticDossardColor(False);
Server_PointsLimit = S_PointsStartup;
***

***Match_StartMatch***
***
UIModules_ScoresTable::SetCustomPoints([]);
ResetMatch();
***

***Match_InitMap***
***
UIModules_ScoresTable::DisplayRoundPoints(True);
UpdateScoresTableFooter(S_PointsStartup);
G_NbOfValidRounds = 0;
***

***Match_StartMap***
***
// Add bot when necessary
Users_SetNbFakeUsers(C_FakeUsersNb, 0);

CarRank::Reset();

// Warm up
if (MM_IsMatchServer()) {
	MM_SetScores([GetBestScore()]);
} else {
	// Warm up
	foreach (Score in Scores) {
		WarmUp::CanPlay(Score, CanSpawn(Score));
	}
	UIModules_ScoresTable::SetFooterInfo(_("Warm up"));
	MB_WarmUp(S_WarmUpNb, S_WarmUpDuration * 1000, S_WarmUpTimeout * 1000);
}
***

***Rounds_CanSpawn***
***
foreach (Score in Scores) {
	declare ModeRounds_CanSpawn for Score = True;
	ModeRounds_CanSpawn = CanSpawn(Score);
}
***

***Match_InitRound***
***
UIManager.UIAll.BigMessage = "$zRound " ^ TL::ToText(G_NbOfValidRounds + 1) ^ " / " ^ TL::ToText(S_RoundsPerMap);
UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::StartRound;
UIManager.UIAll.BigMessageSoundVariant = 0;
MB_Sleep(3000);
UIManager.UIAll.BigMessage = "";
***

***Match_StartRound***
***
if(G_InitDone == False) {
	G_InitDone = True;
	G_NbOfPlayersTotal = Players.count;
	ResetMatch();
}
UpdateScoresTableFooter(S_PointsStartup);
StateMgr::ForcePlayersStates([CupCommon_Const::C_State_Playing]);
CheckRoundBeforePlay();
***

***Match_StartPlayLoop***
***
// Update dossard color
foreach (Player in AllPlayers) {
	if (Player.Score != Null && Scores::GetPlayerMatchPoints(Player.Score) == -1000) {
		Player.Dossard_Color = <0.7, 0., 0.>;
	} else {
		Player.Dossard_Color = Race::C_DossardColor_Default;
	}
}
***

***Rounds_PlayerSpawned***
***
CarRank::ThrottleUpdate(CarRank::C_SortCriteria_CurrentRace);
***

***Match_PlayLoop***
***
// Manage race events
declare RacePendingEvents = Race::GetPendingEvents();
foreach (Event in RacePendingEvents) {
	Race::ValidEvent(Event);
	
	// Waypoint
	if (Event.Type == Events::C_Type_Waypoint) {
		CarRank::ThrottleUpdate(CarRank::C_SortCriteria_CurrentRace);
		if (Event.Player != Null) {
			if (Event.IsEndRace) {
				declare BetterRace = Scores::UpdatePlayerBestRaceIfBetter(Event.Player);
				declare BetterLap = Scores::UpdatePlayerBestLapIfBetter(Event.Player);
				Scores::UpdatePlayerPrevRace(Event.Player);
				ComputeLatestRaceScores();

				Race::SortScores(Race::C_Sort_TotalPoints);
				
				// Start the countdown if it's the first player to finish
				if (EndTime <= 0) {
					EndTime = GetFinishTimeout();
					+++Cup_PlayLoop_FirstPlayerFinishRace+++
				}
			}
			if (Event.IsEndLap) {
				declare Better = Scores::UpdatePlayerBestLapIfBetter(Event.Player);
			}
		}
	}
}

// Manage mode events
foreach (Event in PendingEvents) {
	if (Event.HasBeenPassed || Event.HasBeenDiscarded) continue;
	Events::Invalid(Event);
}

// Server info change
if (Server_PointsLimit != S_PointsStartup) {
	Server_PointsLimit = S_PointsStartup;	
	UpdateScoresTableFooter(S_PointsStartup);
}
***

***Match_EndRound***
***
Race::StopSkipOutroAll();
EndTime = -1;
StateMgr::ForcePlayersStates([CupCommon_Const::C_State_Waiting]);
CarRank::Update(CarRank::C_SortCriteria_CurrentRace);

if (Semver::Compare(XmlRpc::GetApiVersion(), ">=", "2.1.1")) {
	Scores::XmlRpc_SendScores(Scores::C_Section_PreEndRound, "");
}

if (Round_ForceEndRound || Round_SkipPauseRound || Round_Skipped) {
	// Cancel points
	foreach (Score in Scores) {
		Scores::SetPlayerRoundPoints(Score, 0);
	}
	// Do not launch the forced end round sequence after a pause
	if (!Round_SkipPauseRound) {
		ForcedEndRoundSequence();
	}
	DisplayCustomPoints();
	MB_Sleep(3000);
} else {
	// Get the last round points
	ComputeLatestRaceScores();
	+++Cup_EndRound_BeforeScoresUpdate+++
	Race::SortScores(Race::C_Sort_TotalPoints);
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
	MB_Sleep(3000);
	// Add them to the total scores
	ComputeScores();
	Race::SortScores(Race::C_Sort_TotalPoints);
	+++Cup_EndRound_AfterScoresUpdate+++
	DisplayCustomPoints();
	MB_Sleep(3000);
	+++Cup_EndRound_BeforeScoresTableEnd+++
	UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
	UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
	UIModules_BigMessage::SetMessage("");
	

	// Match is over, we have all the loosers
	if (MatchIsOver()) {
		declare Text[] WinnersNames;
		foreach (Player in Players) {
			if(!Spectators.exists(Player)) {
				if (Scores::GetPlayerMatchPoints(Player.Score) >= -1000) WinnersNames.add("["^Player.User.ClubTag^"$z$fff] "^Player.User.Name);
			}
		}
		UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::EndMatch;
		UIManager.UIAll.BigMessageSoundVariant = 0;
		if(WinnersNames.count > 1) {
			UIManager.UIAll.BigMessage = "$0c0Winners : $fff" ^ TL::Join("$z, ", WinnersNames);
		} else {
			UIManager.UIAll.BigMessage = "$0c0Winner : $fff" ^ TL::Join("$z, ", WinnersNames);
		}
		MB_Sleep(7000);
		UIManager.UIAll.BigMessage = "";
		UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedVisible;
		UIManager.UIAll.UISequence = CUIConfig::EUISequence::EndRound;
		MB_StopMatch();
		MB_Sleep(30000);
		UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::Normal;
		UIManager.UIAll.UISequence = CUIConfig::EUISequence::Playing;
		ResetMatch();
	}
	// Map is over, we played all the rounds
	else if (MapIsOver()) {
		MB_StopMap();
	}
}

// Set matchmaking scores
if (MM_IsMatchServer()) {
	MM_SetScores([GetBestScore()]);
}
***

***Match_EndMap***
***
UIModules_ScoresTable::DisplayRoundPoints(False);

Race::SortScores(Race::C_Sort_TotalPoints);

if (!MB_MatchIsRunning()) {
	declare Eliminated <=> Scores::GetBestPlayer(Scores::C_Sort_MatchPoints);
	if (MM_IsMatchServer() && Eliminated != Null) MM_SetMasterLogin(Eliminated.User.Login);
	Scores::SetPlayerWinner(Eliminated);
} else {
	MB_SkipPodiumSequence();
}
***

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Functions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Update the scores table footer text
 *
 *	@param	_PointsLimit							The points limit
 *	@param	_RoundsPerMap							The number of round per map
 *	@param	_MapsPerMatch							The number of maps per match
 */
Void UpdateScoresTableFooter(Integer _PointsLimit) {
	
	declare Text[] Parts;
	declare Message = "";
	if (_PointsLimit > 0) {
		if (Parts.count > 0) Message ^= " | ";
		Message ^= """%{{{Parts.count + 1}}}{{{_PointsLimit}}}""";
		//L16N [TM_Cup_Online] Number of points to reach to win the match.
		Parts.add(_("Points limit : "));
	}
	
	switch (Parts.count) {
		case 0: UIModules_ScoresTable::SetFooterInfo(Message);
		case 1: UIModules_ScoresTable::SetFooterInfo(TL::Compose(Message, Parts[0]));
	}
	
}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check if a player can spawn
 *
 *	@param	_Score										The player's score
 *
 *	@return														True if the player can spawn,
 *																		False otherwise
 */
Boolean CanSpawn(CSmScore _Score) {
	if (_Score == Null) return False;
	
	if (Scores::GetPlayerMatchPoints(_Score) == -2000) {
		return False;
	} else if (MM_IsMatchServer()) {
		declare Player <=> GetPlayer(_Score.User.Login);
		return MM_PlayerIsAllowedToPlay(Player);
	}
	
	return True;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the time left to the players to finish the round after the first player
 *
 *	@return 		The time left in ms
 */
Integer GetFinishTimeout() {
	declare FinishTimeout = 0;
	
	if (S_FinishTimeout >= 0) {
		FinishTimeout = S_FinishTimeout * 1000;
	} else {
		FinishTimeout = 5000;
		if (Map.TMObjective_IsLapRace && Race::GetLapsNb() > 0 && Map.TMObjective_NbLaps > 0) {
			FinishTimeout += ((Map.TMObjective_AuthorTime / Map.TMObjective_NbLaps) * Race::GetLapsNb()) / 6;
		} else {
			FinishTimeout += Map.TMObjective_AuthorTime / 6;
		}
	}
	
	return Now + FinishTimeout;
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Announce a new looser in the chat
 *
 *	@param	_Name			The name of the new looser
 *	@param	_Rank			The rank of the new looser
 */
Void AnnounceEliminated(CUser _User, Integer _Rank) {
	declare Message = "";
	// declare NewRank = G_NbOfPlayersTotal - _Rank + 1;
	declare NewRank = Players.count - _Rank + 1;
	G_NbOfPlayersEliminated += 1;
	G_PlayersEliminated.add(_User.Login);
	switch (NewRank) {
		case 1: Message = TL::Compose("$f90$i $<%1$> takes 1st place!", _User.Name);
		case 2: Message = TL::Compose("$f90$i $<%1$> takes 2nd place!", _User.Name);
		case 3: Message = TL::Compose("$f90$i $<%1$> takes 3rd place!", _User.Name);
		default: Message = TL::Compose("$f90$i $<%1$> takes %2th place!", _User.Name, TL::ToText(NewRank));
	}
	
	UIManager.UIAll.SendChat(Message);
	UIModules_BigMessage::SetMessage(Message);
	Log::Log("[Cup] AnnounceEliminated() | Login : "^_User.Login^" | Name : "^_User.Name^" | _Rank : "^_Rank^" | G_NbOfPlayersEliminated : "^G_NbOfPlayersEliminated^" | Players.count : "^Players.count^" | G_NbOfPlayersTotal : "^G_NbOfPlayersTotal^" | G_PlayersParticipants : "^G_PlayersParticipants.tojson());
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Compute the latest race scores
Void ComputeLatestRaceScores() {
	Race::SortScores(Race::C_Sort_PrevRaceTime);
	
	// Points distributed between all players
	declare I = 0;
	declare J = 0;
	declare CSmPlayer[] FinalistPlayersDNF_WithWorstCheckpoints;
	declare Integer MinCheckpointNbPassed = 9999;
	foreach (Player in AllPlayers) {
		if(!Spectators.exists(Player)) {
			if (Scores::GetPlayerPrevRaceTime(Player.Score) > 0) {
				declare Points = 0;
				declare PointsRepartition = PointsRepartition::GetPointsRepartition();
				if (PointsRepartition.count > 0) {
					if(S_IncreasePointsLooseEachEliminated == True) {
						if (PointsRepartition.existskey(I+G_NbOfPlayersEliminated)) {
							Points = 0 - PointsRepartition[I+G_NbOfPlayersEliminated];
						} else {
							Points = 0 - PointsRepartition[PointsRepartition.count - 1];
						}
					} else {
						if (PointsRepartition.existskey(I)) {
							Points = 0 - PointsRepartition[I];
						} else {
							Points = 0 - PointsRepartition[PointsRepartition.count - 1];
						}
					}
				}
				
				Scores::SetPlayerRoundPoints(Player.Score, Points);
				I += 1;
			} else {
				if(S_Finalist_DNF_Mode == 1) {
					if(Scores::GetPlayerMatchPoints(Player.Score) == -1000) {
						if(Player.LapWaypointTimes.count < MinCheckpointNbPassed) {
							MinCheckpointNbPassed = Player.LapWaypointTimes.count;
							FinalistPlayersDNF_WithWorstCheckpoints.clear();
							FinalistPlayersDNF_WithWorstCheckpoints.add(Player);
						} else if(Player.LapWaypointTimes.count == MinCheckpointNbPassed) {
							FinalistPlayersDNF_WithWorstCheckpoints.add(Player);
						}
					} else {
						Scores::SetPlayerRoundPoints(Player.Score, 0 - S_DNF_LossPoints);
					}
				} else {
					Scores::SetPlayerRoundPoints(Player.Score, 0 - S_DNF_LossPoints);
				}
			}
			J += 1;
		}
	}
	if(S_Finalist_DNF_Mode == 1) {
		foreach(Player in FinalistPlayersDNF_WithWorstCheckpoints) {
			Scores::SetPlayerRoundPoints(Player.Score, 0 - S_DNF_LossPoints);
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Compute the map scores
Void ComputeScores() {
	declare RoundIsValid = False;
	declare NbOfEliminated = 0;
	declare NbOfFinalistEliminated = 0;
	declare NewEliminated = False;
	declare CUser[] EliminatedUsers;
	
	Race::SortScores(Race::C_Sort_TotalPoints);

	declare MaxRoundPoints = 0;
	foreach (Player in Players) {
		if(!Spectators.exists(Player)) {
			if (MaxRoundPoints > Scores::GetPlayerRoundPoints(Player.Score) && Scores::GetPlayerMatchPoints(Player.Score) > -2000) MaxRoundPoints =  Scores::GetPlayerRoundPoints(Player.Score);
		}
	}
	
	foreach (Player in Players) {
		if(!Spectators.exists(Player)) {
			if (Scores::GetPlayerRoundPoints(Player.Score) < 0) RoundIsValid = True;
			
			declare Integer NewMatchPoints = Scores::GetPlayerMatchPoints(Player.Score) + Scores::GetPlayerRoundPoints(Player.Score);

			// Already loose
			if (NewMatchPoints == -2000) {
				Scores::SetPlayerMatchPoints(Player.Score, -2000);
				NbOfEliminated += 1;
			}
			// New Finalist looser
			else if (NewMatchPoints > -1000 && NewMatchPoints <= 0) {
				if(S_DisableFinalist == False) {
					Scores::SetPlayerMatchPoints(Player.Score, -1000);
					NbOfFinalistEliminated += 1;
				} else {
					Scores::SetPlayerMatchPoints(Player.Score, -2000);
					NbOfEliminated += 1;
					NewEliminated = True;
					EliminatedUsers.add(Player.User);
				}
			}
			// New looser
			else if (NewMatchPoints > -2000 && NewMatchPoints < -1000 && Scores::GetPlayerRoundPoints(Player.Score) == MaxRoundPoints) {
				Scores::SetPlayerMatchPoints(Player.Score, -2000);
				NbOfEliminated += 1;
				NewEliminated = True;
				EliminatedUsers.add(Player.User);
			}
			// Already finalist and not last
			else if (Scores::GetPlayerMatchPoints(Player.Score) == -1000 && Scores::GetPlayerRoundPoints(Player.Score) != MaxRoundPoints) {
				Scores::SetPlayerMatchPoints(Player.Score, -1000);
				NbOfFinalistEliminated += 1;
			}
			// Standard round finish
			else {
				Scores::AddPlayerMatchPoints(Player.Score, Scores::GetPlayerRoundPoints(Player.Score));
				if (NewMatchPoints < -2000) Scores::SetPlayerMatchPoints(Player.Score, -2000);
			}
			
			Scores::AddPlayerMapPoints(Player.Score, Scores::GetPlayerRoundPoints(Player.Score));
			Scores::SetPlayerRoundPoints(Player.Score, 0);
		}
	}

	if(NewEliminated == True) {
		foreach (EliminatedUser in EliminatedUsers) {
			AnnounceEliminated(EliminatedUser, NbOfEliminated);
		}
	}
	
	if (RoundIsValid) G_NbOfValidRounds += 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Get the best score
 *
 *	@return					The best score
 */
Integer GetBestScore() {
	declare Max = 0;
	foreach (Player in Players) {
		if(!Spectators.exists(Player)) {
			if (Scores::GetPlayerMatchPoints(Player.Score) > Max) Max = Scores::GetPlayerMatchPoints(Player.Score);
		}
	}
	return Max;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check if we should go to the next map
 *
 *	@return		True if it is the case, false otherwise
 */
Boolean MapIsOver() {
	if (G_NbOfValidRounds >= S_RoundsPerMap) return True;
	return False;
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check if we have found all the loosers
 *
 *	@return					True if the match is over, false otherwise
 */
Boolean MatchIsOver() {
	Log::Log("[Cup] MatchIsOver() check | S_PointsStartup : "^S_PointsStartup);
	declare NbOfPlayersActive = 0;
	foreach (Player in Players) {
		if(!Spectators.exists(Player)) {
			if (Scores::GetPlayerMatchPoints(Player.Score) >= -1000) NbOfPlayersActive += 1;
		}
	}
	
	// If there's only one player they need to reach the points limit to win
	// If there's more than one player then all players except one must reach the points limit
	declare PlayerEliminatedLimit = ML::Max(Players.count - 1, 1);
	Log::Log("""[Cup] Match is over ? {{{(S_NbOfWinners >= NbOfPlayersActive)}}} | ({{{S_NbOfWinners}}} >= {{{NbOfPlayersActive}}})""");
	if (S_NbOfWinners >= NbOfPlayersActive) return True;

	Log::Log("[Cup] MatchIsOver() | G_NbOfPlayersEliminated : "^G_NbOfPlayersEliminated^" | Players.count : "^Players.count^" | G_NbOfPlayersTotal : "^G_NbOfPlayersTotal^" | G_PlayersParticipants : "^G_PlayersParticipants.tojson()^" | G_PlayersEliminated : "^G_PlayersEliminated.tojson());
	
	return False;
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Reset Scores and start match
 *
 */
Void ResetMatch() {
	Log::Log("[Cup] ResetMatch() check | S_PointsStartup : "^S_PointsStartup);
	G_NbOfPlayersEliminated = 0;
	G_PlayersEliminated.clear();
	G_PlayersParticipants.clear();
	declare Text[][Text] CustomPoints;
	foreach (Player in AllPlayers) {
		if(Spectators.exists(Player)) {
			Scores::SetPlayerMatchPoints(Player.Score, -10000);
			CustomPoints[Player.Score.User.WebServicesUserId] = [C_Spectator_Text, C_Color_Spectator];
		} else {
			Scores::SetPlayerMatchPoints(Player.Score, S_PointsStartup);
			G_PlayersParticipants.add(Player.User.Login);
		}
	}
	UIModules_ScoresTable::SetCustomPoints(CustomPoints);
	Log::Log("[Cup] ---------------- SETTINGS ---------------");
	Log::Log("[Cup] S_ScriptEnvironment = " ^ S_ScriptEnvironment);
	Log::Log("[Cup] S_PointsStartup = " ^ S_PointsStartup);
	Log::Log("[Cup] S_FinishTimeout = " ^ S_FinishTimeout);
	Log::Log("[Cup] S_RoundsPerMap = " ^ S_RoundsPerMap);
	Log::Log("[Cup] S_NbOfWinners = " ^ S_NbOfWinners);
	Log::Log("[Cup] S_WarmUpNb = " ^ S_WarmUpNb);
	Log::Log("[Cup] S_WarmUpDuration = " ^ S_WarmUpDuration);
	Log::Log("[Cup] S_WarmUpTimeout = " ^ S_WarmUpTimeout);
	Log::Log("[Cup] S_DisableFinalist = " ^ S_DisableFinalist);
	Log::Log("[Cup] S_AllowFastForwardRounds = " ^ S_AllowFastForwardRounds);
	Log::Log("[Cup] S_PointsRepartition = " ^ S_PointsRepartition);
	Log::Log("[Cup] S_IncreasePointsLooseEachEliminated = " ^ S_IncreasePointsLooseEachEliminated);
	Log::Log("[Cup] S_DNF_LossPoints = " ^ S_DNF_LossPoints);
	Log::Log("[Cup] S_Finalist_DNF_Mode = " ^ S_Finalist_DNF_Mode);
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check round before playing it, if necessary to fast forward it
 *
 */
Void DisplayCustomPoints() {
	// Display Spectator, Finalist & Eliminated UI
	declare Text[][Text] CustomPoints;
	foreach (Player in AllPlayers) {
		if(!Spectators.exists(Player)) {
			if (Scores::GetPlayerMatchPoints(Player.Score) == -1000) {
				CustomPoints[Player.Score.User.WebServicesUserId] = [C_Finalist_Text, C_Color_Finalist];
			}
			else if (Scores::GetPlayerMatchPoints(Player.Score) <= -2000) {
				CustomPoints[Player.Score.User.WebServicesUserId] = [C_Eliminated_Text, C_Color_Eliminated];
			}
		} else {
			CustomPoints[Player.Score.User.WebServicesUserId] = [C_Spectator_Text, C_Color_Spectator];
		}
	}
	UIModules_ScoresTable::SetCustomPoints(CustomPoints);
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check round before playing it, if necessary to fast forward it
 *
 */
Void CheckRoundBeforePlay() {
	if(S_AllowFastForwardRounds == True) {
		declare Integer[] PointsRepartitionTable = PointsRepartition::GetPointsRepartition();
		declare Boolean IsRoundFastForwardCompatible = True;
		declare Boolean AtLeastOnePlayerHasPositivePoints = False;
		foreach (Player in Players) {
			declare PlayerMatchPoints = Scores::GetPlayerMatchPoints(Player.Score);
			if (PlayerMatchPoints >= 0) {
				AtLeastOnePlayerHasPositivePoints = True;
				if(PlayerMatchPoints > PointsRepartitionTable[0]) {
					IsRoundFastForwardCompatible = False;
					break;
				}
			}
		}
		if(AtLeastOnePlayerHasPositivePoints == False) IsRoundFastForwardCompatible = False;
		Log::Log("[Cup] CheckRoundBeforePlay() check | AtLeastOnePlayerHasPositivePoints : "^AtLeastOnePlayerHasPositivePoints^" | IsRoundFastForwardCompatible : "^IsRoundFastForwardCompatible);
		if(IsRoundFastForwardCompatible == True) {
			foreach (Player in Players) {
				declare PlayerMatchPoints = Scores::GetPlayerMatchPoints(Player.Score);
				if (PlayerMatchPoints > -2000) {
					Scores::SetPlayerMatchPoints(Player.Score, -1000);
				}
			}
			UIManager.UIAll.BigMessageSound = CUIConfig::EUISound::EndRound;
			UIManager.UIAll.BigMessageSoundVariant = 0;
			UIManager.UIAll.BigMessage = "$c00This round is fast-forwarded. Every remaining players are now Finalists.";
			DisplayCustomPoints();
			MB_Sleep(5000);
			UIManager.UIAll.BigMessage = "";
			MB_StopRound();
		}
	}
}
